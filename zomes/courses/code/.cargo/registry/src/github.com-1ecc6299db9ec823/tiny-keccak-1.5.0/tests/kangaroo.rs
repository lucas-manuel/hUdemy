use tiny_keccak::*;

fn pattern(len: usize) -> Vec<u8> {
    (0..len).map(|j| (j % 251) as u8).collect()
}

fn test_kangaroo_twelve<A: AsRef<[u8]>, B: AsRef<[u8]>>(custom_string: A, message: B, output_len: usize, expected: &[u8]) {
    let mut kangaroo = KangarooTwelve::new(custom_string);
    kangaroo.update(message.as_ref());
    let mut res = vec![0; output_len];
    kangaroo.finalize(&mut res);
    assert_eq!(&res[output_len - expected.len()..], expected);
}

#[test]
fn empty_kangaroo_twelve() {
    let expected = vec![
        0x1a, 0xc2, 0xd4, 0x50, 0xfc, 0x3b, 0x42, 0x05, 0xd1, 0x9d, 0xa7, 0xbf, 0xca, 0x1b, 0x37,
        0x51, 0x3c, 0x08, 0x03, 0x57, 0x7a, 0xc7, 0x16, 0x7f, 0x06, 0xfe, 0x2c, 0xe1, 0xf0, 0xef,
        0x39, 0xe5,
    ];
    test_kangaroo_twelve("", "", 32, &expected);
}

#[test]
fn kangaroo_twelve_long() {
    let expected = vec![
        0xe8, 0xdc, 0x56, 0x36, 0x42, 0xf7, 0x22, 0x8c, 0x84, 0x68, 0x4c, 0x89, 0x84, 0x05, 0xd3,
        0xa8, 0x34, 0x79, 0x91, 0x58, 0xc0, 0x79, 0xb1, 0x28, 0x80, 0x27, 0x7a, 0x1d, 0x28, 0xe2,
        0xff, 0x6d,
    ];
    test_kangaroo_twelve("", "", 10032, &expected);
}

#[test]
fn kangaroo_twelve_with_message() {
    let expected = vec![
        0x2b, 0xda, 0x92, 0x45, 0x0e, 0x8b, 0x14, 0x7f, 0x8a, 0x7c, 0xb6, 0x29, 0xe7, 0x84, 0xa0,
        0x58, 0xef, 0xca, 0x7c, 0xf7, 0xd8, 0x21, 0x8e, 0x02, 0xd3, 0x45, 0xdf, 0xaa, 0x65, 0x24,
        0x4a, 0x1f,
    ];
    test_kangaroo_twelve("", pattern(1), 32, &expected);
}

#[test]
fn kangaroo_twelve_with_message2() {
    let expected = vec![
        0x6b, 0xf7, 0x5f, 0xa2, 0x23, 0x91, 0x98, 0xdb, 0x47, 0x72, 0xe3, 0x64, 0x78, 0xf8, 0xe1,
        0x9b, 0x0f, 0x37, 0x12, 0x05, 0xf6, 0xa9, 0xa9, 0x3a, 0x27, 0x3f, 0x51, 0xdf, 0x37, 0x12,
        0x28, 0x88,
    ];
    test_kangaroo_twelve("", pattern(17), 32, &expected);
}

#[test]
fn kangaroo_twelve_with_custom_string() {
    let expected = vec![
        0xfa, 0xb6, 0x58, 0xdb, 0x63, 0xe9, 0x4a, 0x24, 0x61, 0x88, 0xbf, 0x7a, 0xf6, 0x9a, 0x13,
        0x30, 0x45, 0xf4, 0x6e, 0xe9, 0x84, 0xc5, 0x6e, 0x3c, 0x33, 0x28, 0xca, 0xaf, 0x1a, 0xa1,
        0xa5, 0x83,
    ];
    test_kangaroo_twelve(pattern(1), "", 32, &expected);
}

#[test]
fn kangaroo_twelve_with_custom_string_and_message() {
    let expected = vec![
        0xd8, 0x48, 0xc5, 0x06, 0x8c, 0xed, 0x73, 0x6f, 0x44, 0x62, 0x15, 0x9b, 0x98, 0x67, 0xfd,
        0x4c, 0x20, 0xb8, 0x08, 0xac, 0xc3, 0xd5, 0xbc, 0x48, 0xe0, 0xb0, 0x6b, 0xa0, 0xa3, 0x76,
        0x2e, 0xc4,
    ];
    test_kangaroo_twelve(pattern(41), &[0xff], 32, &expected);
}

#[test]
fn kangaroo_twelve_with_custom_string_and_message2() {
    let expected = vec![
        0x75, 0xd2, 0xf8, 0x6a, 0x2e, 0x64, 0x45, 0x66, 0x72, 0x6b, 0x4f, 0xbc, 0xfc, 0x56, 0x57,
        0xb9, 0xdb, 0xcf, 0x07, 0x0c, 0x7b, 0x0d, 0xca, 0x06, 0x45, 0x0a, 0xb2, 0x91, 0xd7, 0x44,
        0x3b, 0xcf
    ];
    test_kangaroo_twelve(pattern(68921), &[0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], 32, &expected);
}
